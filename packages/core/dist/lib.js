"use strict";import{QueryClient as R,onlineManager as b,focusManager as O}from"@tanstack/query-core";import{nanoid as G}from"nanoid/non-secure";import y from"object-hash";import{proxy as x}from"valtio/vanilla";import{getDefaultRespondedAt as L,getGetterInner as N,internalFetch as F}from"./internal.js";export function createOptq(e){const t=e?.queryClient??new R,r=x([]),a=x({}),u=x({}),h=D({config:e,requestStore:r,cacheStore:a,predictionStore:u}),l=T({config:e,predictionStore:u}),c=_({config:e,requestStore:r,cacheStore:a,predictionStore:u,set:h}),i=new Promise(o=>{if(b.isOnline())return o();const s=b.subscribe(w=>{w&&(s(),o())})}).then(async()=>{if(e?.resumeRequestMode==="sequential"){const o=[];for(const s of r)if(s.waitingNetwork){s.waitingNetwork=!1;try{const w=await c(s);o.push({status:"fulfilled",value:{request:s,response:w}})}catch(w){o.push({status:"rejected",value:{request:s},reason:w})}}return o}return await Promise.all(r.filter(o=>o.waitingNetwork).map(async o=>{o.waitingNetwork=!1;try{const s=await c(o);return{status:"fulfilled",value:{request:o,response:s}}}catch(s){return{status:"rejected",value:{request:o},reason:s}}}))});return O.setEventListener(o=>{const s=()=>o();if(typeof window<"u"&&window.addEventListener)return window.addEventListener("visibilitychange",s,!1),window.addEventListener("focus",s,!1),()=>{window.removeEventListener("visibilitychange",s),window.removeEventListener("focus",s)}}),{config:e,queryClient:t,requestStore:r,cacheStore:a,predictionStore:u,set:h,get:l,mutate:c,pendingResponses:i}}function D(e){return(t,r,a,u)=>{var h;const l=`GET ${t}`,v=e.config?.routes?.[l]?.hash??y,i=v(r),S=e.cacheStore[t]?.[i]?.respondedAt;(S===void 0||S<=u)&&(e.cacheStore[t]=e.cacheStore[t]??{},(h=e.cacheStore[t])[i]??(h[i]={}),e.cacheStore[t][i].value=a,e.cacheStore[t][i].respondedAt=u),A(e,t,i,v)}}function T(e){const t=N(e);return(r,a)=>t(e.predictionStore,r,a)}function _(e){return async function({id:t=G(),apiId:r,params:a,headers:u,body:h}){let l,c=100;arguments.length>1&&(console.warn("Do not use additional arguments of `mutate` in production."),l=arguments[1],c=arguments[2]??100);const v=e.config?.routes?.[r],i={id:t,apiId:r,params:a,headers:u,body:h},S=[],o=(n,f)=>{const m=`GET ${n}`,E=(e.config?.routes?.[m]?.hash??y)(f??{});for(const[P,k]of S)if(n===P&&E===k)return;S.push([n,E])};if(!e.requestStore.some(n=>n.id===t)){e.requestStore.push({...i,waitingNetwork:!b.isOnline(),affectedPredictions:S}),v?.actions?.({...i,set:o});for(const[n,f]of S)A(e,n,f)}const s=r.slice(0,r.indexOf(" "));return(l?new Promise(n=>setTimeout(()=>n(),c)).then(l):new Promise(n=>{if(b.isOnline())return n();const f=b.subscribe(m=>{if(m){f(),n();const d=e.requestStore.findIndex(g=>g.id===t);d>=0&&(e.requestStore[d].waitingNetwork=!1)}})}).then(()=>F({baseUrl:e.config?.baseUrl??"",method:s,path:r.slice(s.length+1),params:a,headers:u,body:h}))).then(n=>{const f=v?.respondedAt?.(n)??e.config?.respondedAt?.(n)??L(n),m=e.requestStore.findIndex(d=>d.id===t);return m>=0&&(e.requestStore[m].respondedAt=f),v?.onResponse?.({respondedAt:f,params:a,status:n.status,ok:n.ok,headers:n.headers,data:n.data,set:(d,g,E)=>e.set(d,g,E,f),request:i,removeRequest(){const d=e.requestStore.findIndex(g=>g.id===t);if(d>=0){const[g]=e.requestStore.splice(d,1);for(const[E,P]of g.affectedPredictions??[])A(e,E,P)}}}),{...n,respondedAt:f}}).catch(n=>{const f=e.requestStore.findIndex(m=>m.id===t);if(f>=0){const[m]=e.requestStore.splice(f,1);for(const[d,g]of m.affectedPredictions??[])A(e,d,g)}throw n})}}function A(e,t,r,a){var u;const h=`GET ${t}`;let l=a;l||(l=e.config.routes?.[h]?.hash??y),(u=e.predictionStore)[t]??(u[t]={}),e.predictionStore[t][r]=e.cacheStore[t]?.[r]?.value;for(let c=0,v=e.requestStore.length,i=e.requestStore[c];c<v;i=e.requestStore[++c]){i.affectedPredictions=[];const S=(o,s,w)=>{if(o!==t||r!==l(s)||i.respondedAt!==void 0&&e.cacheStore?.[t]?.[r].respondedAt!==void 0&&i.respondedAt<=e.cacheStore[t][r].respondedAt)return;const n=typeof w=="function"?w(e.predictionStore[t][r]):w;e.predictionStore[t][r]=n,i.affectedPredictions.push([t,r])};e.config.routes?.[i.apiId]?.actions?.({...i,set:S})}for(let c=e.requestStore.length-1;c>=0;c--)e.requestStore[c].affectedPredictions.length||e.requestStore.splice(c,1)}
