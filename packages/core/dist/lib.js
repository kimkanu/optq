"use strict";import{QueryClient as N,onlineManager as A,focusManager as O}from"@tanstack/query-core";import{nanoid as R}from"nanoid";import P from"object-hash";import{proxy as x}from"valtio/vanilla";import{getDefaultRespondedAt as G,getGetterInner as L,internalFetch as F}from"./internal.js";export function createOptq(e){const t=e?.queryClient??new N,r=x([]),a=x({}),u=x({}),h=_({config:e,requestStore:r,cacheStore:a,predictionStore:u}),l=D({config:e,predictionStore:u}),c=T({config:e,requestStore:r,cacheStore:a,predictionStore:u,set:h}),i=new Promise(o=>{if(A.isOnline())return o();const s=A.subscribe(S=>{S&&(s(),o())})}).then(async()=>{if(e?.resumeRequestMode==="sequential"){const o=[];for(const s of r)if(s.waitingNetwork){s.waitingNetwork=!1;try{const S=await c(s);o.push({status:"fulfilled",value:{request:s,response:S}})}catch(S){o.push({status:"rejected",value:{request:s},reason:S})}}return o}return await Promise.all(r.filter(o=>o.waitingNetwork).map(async o=>{o.waitingNetwork=!1;try{const s=await c(o);return{status:"fulfilled",value:{request:o,response:s}}}catch(s){return{status:"rejected",value:{request:o},reason:s}}}))});return O.setEventListener(o=>{const s=()=>o();if(typeof window<"u"&&window.addEventListener)return window.addEventListener("visibilitychange",s,!1),window.addEventListener("focus",s,!1),()=>{window.removeEventListener("visibilitychange",s),window.removeEventListener("focus",s)}}),{config:e,queryClient:t,requestStore:r,cacheStore:a,predictionStore:u,set:h,get:l,mutate:c,pendingResponses:i}}function _(e){return(t,r,a,u)=>{var h;const l=`GET ${t}`,v=e.config?.routes?.[l]?.hash??P,i=v(r),w=e.cacheStore[t]?.[i]?.respondedAt;(w===void 0||w<=u)&&(e.cacheStore[t]=e.cacheStore[t]??{},(h=e.cacheStore[t])[i]??(h[i]={}),e.cacheStore[t][i].value=a,e.cacheStore[t][i].respondedAt=u),b(e,t,i,v)}}function D(e){const t=L(e);return(r,a)=>t(e.predictionStore,r,a)}function T(e){return async function({id:t=R(),apiId:r,params:a,headers:u,body:h}){let l,c=100;if(arguments.length>1){if("env"in import.meta&&import.meta.env.NODE_ENV!=="test")throw new Error("Arguments other than the first one are only allowed in test environment.");l=arguments[1],c=arguments[2]??100}const v=e.config?.routes?.[r],i={id:t,apiId:r,params:a,headers:u,body:h},w=[],o=(n,f)=>{const m=`GET ${n}`,E=(e.config?.routes?.[m]?.hash??P)(f??{});for(const[y,k]of w)if(n===y&&E===k)return;w.push([n,E])};if(!e.requestStore.some(n=>n.id===t)){e.requestStore.push({...i,waitingNetwork:!A.isOnline(),affectedPredictions:w}),v?.actions?.({...i,set:o});for(const[n,f]of w)b(e,n,f)}const s=r.slice(0,r.indexOf(" "));return(l?new Promise(n=>setTimeout(()=>n(),c)).then(l):new Promise(n=>{if(A.isOnline())return n();const f=A.subscribe(m=>{if(m){f(),n();const d=e.requestStore.findIndex(g=>g.id===t);d>=0&&(e.requestStore[d].waitingNetwork=!1)}})}).then(()=>F({baseUrl:e.config?.baseUrl??"",method:s,path:r.slice(s.length+1),params:a,headers:u,body:h}))).then(n=>{const f=v?.respondedAt?.(n)??e.config?.respondedAt?.(n)??G(n),m=e.requestStore.findIndex(d=>d.id===t);return m>=0&&(e.requestStore[m].respondedAt=f),v?.onResponse?.({respondedAt:f,params:a,status:n.status,ok:n.ok,headers:n.headers,data:n.data,set:(d,g,E)=>e.set(d,g,E,f),request:i,removeRequest(){const d=e.requestStore.findIndex(g=>g.id===t);if(d>=0){const[g]=e.requestStore.splice(d,1);for(const[E,y]of g.affectedPredictions??[])b(e,E,y)}}}),{...n,respondedAt:f}}).catch(n=>{const f=e.requestStore.findIndex(m=>m.id===t);if(f>=0){const[m]=e.requestStore.splice(f,1);for(const[d,g]of m.affectedPredictions??[])b(e,d,g)}throw n})}}function b(e,t,r,a){var u;const h=`GET ${t}`;let l=a;l||(l=e.config.routes?.[h]?.hash??P),(u=e.predictionStore)[t]??(u[t]={}),e.predictionStore[t][r]=e.cacheStore[t]?.[r]?.value;for(let c=0,v=e.requestStore.length,i=e.requestStore[c];c<v;i=e.requestStore[++c]){i.affectedPredictions=[];const w=(o,s,S)=>{if(o!==t||r!==l(s)||i.respondedAt!==void 0&&e.cacheStore?.[t]?.[r].respondedAt!==void 0&&i.respondedAt<=e.cacheStore[t][r].respondedAt)return;const n=typeof S=="function"?S(e.predictionStore[t][r]):S;e.predictionStore[t][r]=n,i.affectedPredictions.push([t,r])};e.config.routes?.[i.apiId]?.actions?.({...i,set:w})}for(let c=e.requestStore.length-1;c>=0;c--)e.requestStore[c].affectedPredictions.length||e.requestStore.splice(c,1)}
