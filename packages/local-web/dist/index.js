"use strict";import{installOptqLocalDatabaseHelper as o,OPTQ_DATABASE_VERSION as d}from"@optq/local";import{openDB as u}from"idb";export default async function h(n,e="optq"){if(typeof indexedDB>"u")throw new Error("IndexedDB is not supported in this environment");const a=await i.new(e);await o(n,a)}class i{constructor(e,a){Object.defineProperty(this,"database",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:a})}static async new(e="optq"){const a=await u(e,d,{upgrade(t,s){let r=s;r<1&&(t.objectStoreNames.contains("metadata")||t.createObjectStore("metadata"),t.objectStoreNames.contains("requests")||t.createObjectStore("requests"),t.objectStoreNames.contains("caches")||t.createObjectStore("caches",{autoIncrement:!0}).createIndex("resId, hash",["resId","hash"]),t.objectStoreNames.contains("predictions")||t.createObjectStore("predictions",{autoIncrement:!0}).createIndex("resId, hash",["resId","hash"]),r=1)}});return new i(a,e)}async getMetadata(){const e=await this.database.get("metadata",0);return{version:this.database.version,apiVersion:e?.apiVersion}}async setMetadata({apiVersion:e}){return void await this.database.put("metadata",{id:0,apiVersion:e},0)}getAllRequests(){return this.database.getAll("requests")}getAllCaches(){return this.database.getAll("caches")}getAllPredictions(){return this.database.getAll("predictions").then(e=>e)}async deleteRequest({id:e}){await this.database.delete("requests",e)}async deleteCache({resId:e,hash:a}){const t=await this.database.getKeyFromIndex("caches","resId, hash",[e,a]);t!==void 0&&await this.database.delete("caches",t)}async deletePrediction({resId:e,hash:a}){const t=await this.database.getKeyFromIndex("predictions","resId, hash",[e,a]);t!==void 0&&await this.database.delete("predictions",t)}async upsertRequest(e){await this.database.put("requests",e,e.id)}async upsertCache({resId:e,hash:a,value:t,respondedAt:s}){const r=await this.database.getKeyFromIndex("caches","resId, hash",[e,a]);await this.database.put("caches",{resId:e,hash:a,value:t,respondedAt:s},r)}async upsertPrediction({resId:e,hash:a,value:t}){const s=await this.database.getKeyFromIndex("predictions","resId, hash",[e,a]);await this.database.put("predictions",{resId:e,hash:a,value:t},s)}}
