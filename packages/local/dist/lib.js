"use strict";import c from"superjson";import{subscribe as d}from"valtio/vanilla";export const OPTQ_DATABASE_VERSION=1;export async function installOptqLocalDatabaseHelper(r,o){await Promise.allSettled([o.getAllRequests().then(async i=>{for(const{respondedAt:e,...t}of i)try{r.requestStore.push({...t,body:c.deserialize(t.body),respondedAt:typeof e=="string"?BigInt(e):e})}catch(n){console.error(n)}}),o.getAllPredictions().then(async i=>{var e;for(const{resId:t,hash:n,value:a}of i)try{(e=r.predictionStore)[t]??(e[t]={}),r.predictionStore[t][n]=c.deserialize(a)}catch(s){console.error(s)}}),o.getAllCaches().then(async i=>{var e;for(const{resId:t,hash:n,value:a,respondedAt:s}of i)try{(e=r.cacheStore)[t]??(e[t]={}),r.cacheStore[t][n]={value:c.deserialize(a),respondedAt:typeof s=="string"?BigInt(s):s}}catch(l){console.error(l)}})]);const u=await o.getMetadata(),h=r.config.apiVersion;return u.apiVersion!==h&&await o.setMetadata({version:OPTQ_DATABASE_VERSION,apiVersion:h}),d(r.requestStore,async i=>{for(const e of i)try{if(e[0]==="delete"){const{id:t}=e[2];await o.deleteRequest({id:t})}else if(e[0]==="set"&&e[1].length===1&&e[1][0]!=="length"&&e[3]){const{id:t}=e[3];await o.deleteRequest({id:t})}}catch(t){console.error(t)}for(const e of r.requestStore)try{if(!e.waitingNetwork)continue;await o.upsertRequest({id:e.id,apiId:e.apiId,params:f(e.params),headers:f(e.headers),body:c.serialize(e.body),waitingNetwork:e.waitingNetwork,affectedPredictions:f(e.affectedPredictions),respondedAt:e.respondedAt?.toString()})}catch(t){console.error(t)}}),d(r.predictionStore,async i=>{for(const e of i)try{if(e[0]!=="set")continue;const[,t,n]=e;if(t.length!==2)continue;const[a,s]=t;await o.upsertPrediction({resId:a,hash:s,value:c.serialize(n)})}catch(t){console.error(t)}}),d(r.cacheStore,async i=>{for(const e of i)try{if(e[0]!=="set")continue;const[,t,{value:n,respondedAt:a}]=e;if(t.length!==2)continue;const[s,l]=t;await o.upsertCache({resId:s,hash:l,value:c.serialize(n),respondedAt:a.toString()})}catch(t){console.error(t)}}),o}function f(r){return c.deserialize(c.serialize(r))}
